
EXTIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000334  08000334  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000334  08000334  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000334  08000334  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000334  08000334  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800033c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000340  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000340  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001447  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006cf  00000000  00000000  000214b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00021b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017d  00000000  00000000  00021da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000846  00000000  00000000  00021f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029ab  00000000  00000000  0002276b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bb84  00000000  00000000  00025116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000690  00000000  00000000  000a0c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000a132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800031c 	.word	0x0800031c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800031c 	.word	0x0800031c

0800014c <_Z4initv>:
      GPIOA->ODR ^=  (1 << 1);
  }

}
void init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	// enable clock for Alternate Function
		RCC->APB2ENR = (1<<0) | (1<<3) | (1<<2);
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <_Z4initv+0x28>)
 8000152:	220d      	movs	r2, #13
 8000154:	619a      	str	r2, [r3, #24]
	 	GPIOA->CRL = 0x33333333;
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <_Z4initv+0x2c>)
 8000158:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800015c:	601a      	str	r2, [r3, #0]
		GPIOB->CRL = 0x44444444;
 800015e:	4b07      	ldr	r3, [pc, #28]	; (800017c <_Z4initv+0x30>)
 8000160:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000164:	601a      	str	r2, [r3, #0]
		GPIOA->ODR =  (1 << 1);
 8000166:	4b04      	ldr	r3, [pc, #16]	; (8000178 <_Z4initv+0x2c>)
 8000168:	2202      	movs	r2, #2
 800016a:	60da      	str	r2, [r3, #12]
}
 800016c:	bf00      	nop
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	40021000 	.word	0x40021000
 8000178:	40010800 	.word	0x40010800
 800017c:	40010c00 	.word	0x40010c00

08000180 <main>:
/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/
int main (void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0

	init();
 8000184:	f7ff ffe2 	bl	800014c <_Z4initv>
    // Map EXTI4 to PB4
    AFIO->EXTICR[1] = (1<<0); //0x00000001
 8000188:	4b08      	ldr	r3, [pc, #32]	; (80001ac <main+0x2c>)
 800018a:	2201      	movs	r2, #1
 800018c:	60da      	str	r2, [r3, #12]

	EXTI->IMR       = (1 << 4) ;           // unmask interrupt
 800018e:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <main+0x30>)
 8000190:	2210      	movs	r2, #16
 8000192:	601a      	str	r2, [r3, #0]
	EXTI->EMR       = (1 << 4) ;             // unmask event
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <main+0x30>)
 8000196:	2210      	movs	r2, #16
 8000198:	605a      	str	r2, [r3, #4]
	EXTI->RTSR      = (1 << 4) ;            // set rising edge
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <main+0x30>)
 800019c:	2210      	movs	r2, #16
 800019e:	609a      	str	r2, [r3, #8]
	//EXTI->FTSR       = (1 << 4) ;            // set falling edge
	NVIC->ISER[0] = (1<<10);
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <main+0x34>)
 80001a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001a6:	601a      	str	r2, [r3, #0]

  while (1) {
 80001a8:	e7fe      	b.n	80001a8 <main+0x28>
 80001aa:	bf00      	nop
 80001ac:	40010000 	.word	0x40010000
 80001b0:	40010400 	.word	0x40010400
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <NMI_Handler+0x4>

080001be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001be:	b480      	push	{r7}
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <HardFault_Handler+0x4>

080001c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <MemManage_Handler+0x4>

080001ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001ce:	e7fe      	b.n	80001ce <BusFault_Handler+0x4>

080001d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <UsageFault_Handler+0x4>

080001d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr

080001fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001fe:	f000 f835 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}

08000206 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800020a:	2010      	movs	r0, #16
 800020c:	f000 f840 	bl	8000290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000220:	f7ff fff8 	bl	8000214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000226:	490c      	ldr	r1, [pc, #48]	; (8000258 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <LoopFillZerobss+0x16>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a09      	ldr	r2, [pc, #36]	; (8000260 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800023c:	4c09      	ldr	r4, [pc, #36]	; (8000264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800024a:	f000 f843 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ff97 	bl	8000180 <main>
  bx lr
 8000252:	4770      	bx	lr
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800025c:	0800033c 	.word	0x0800033c
  ldr r2, =_sbss
 8000260:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000264:	20000024 	.word	0x20000024

08000268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <ADC1_2_IRQHandler>
	...

0800026c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4413      	add	r3, r2
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x20>)
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	20000000 	.word	0x20000000
 800028c:	20000020 	.word	0x20000020

08000290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800029c:	695a      	ldr	r2, [r3, #20]
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	4013      	ands	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d006      	beq.n	80002b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80002a6:	4a05      	ldr	r2, [pc, #20]	; (80002bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 f806 	bl	80002c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010400 	.word	0x40010400

080002c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	2600      	movs	r6, #0
 80002d8:	4d0c      	ldr	r5, [pc, #48]	; (800030c <__libc_init_array+0x38>)
 80002da:	4c0d      	ldr	r4, [pc, #52]	; (8000310 <__libc_init_array+0x3c>)
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	42a6      	cmp	r6, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	f000 f81a 	bl	800031c <_init>
 80002e8:	2600      	movs	r6, #0
 80002ea:	4d0a      	ldr	r5, [pc, #40]	; (8000314 <__libc_init_array+0x40>)
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <__libc_init_array+0x44>)
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	42a6      	cmp	r6, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	3601      	adds	r6, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	f855 3b04 	ldr.w	r3, [r5], #4
 8000306:	4798      	blx	r3
 8000308:	3601      	adds	r6, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000334 	.word	0x08000334
 8000310:	08000334 	.word	0x08000334
 8000314:	08000334 	.word	0x08000334
 8000318:	08000338 	.word	0x08000338

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
