#include "main.h"

void delay_ms(uint32_t ms) {
    // Assuming SysTick is configured to generate interrupts every 1ms
    SysTick_Config(SystemCoreClock / 1000);

    while (ms_delay > 0) {
        // Wait for SysTick interrupt
    }

    SysTick->CTRL = 0; // Disable SysTick
}

void TIM2_Init(void) {
    // Enable Timer2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Configure Timer2 for PWM generation
    TIM2->PSC = 72 - 1; // Prescaler to get a 1 MHz timer clock
    TIM2->ARR = 20000 - 1; // Auto-reload value for 20 ms period (50 Hz)

    // Configure PWM mode 1 for CH2 (connected to PA1)
    TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
    TIM2->CCMR1 &= ~TIM_CCMR1_OC2M_0;
    TIM2->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload for CH2

    TIM2->CCER |= TIM_CCER_CC2E; // Enable capture/compare channel 2 output
    TIM2->CR1 |= TIM_CR1_CEN; // Enable Timer2
}

void SetServoAngle(uint8_t angle) {
    // Map the angle to the corresponding pulse width
    uint16_t pulse_width = 500 + static_cast<uint16_t>(angle) * 20; // 500 to 2500 microseconds for 0 to 180 degrees
    TIM2->CCR2 = pulse_width;
}

int main(void) {
    // Set clock to 72 MHz
    SystemInit();

    // Initialize Timer2 for PWM
    TIM2_Init();

    while (1) {
        // Sweep the servo back and forth
        for (uint8_t angle = 0; angle <= 180; angle += 10) {
            SetServoAngle(angle);
            delay_ms(500);
        }

        for (uint8_t angle = 180; angle >= 0; angle -= 10) {
            SetServoAngle(angle);
            delay_ms(500);
        }
    }
}
