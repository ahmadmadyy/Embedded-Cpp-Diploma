#include "main.h"

class ServoMotor {
public:
    ServoMotor() {
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
        GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1); // Configure PA1 as an output with 2 MHz speed and alternate function push-pull

        // Configure Timer2 for PWM generation
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable Timer2 clock
        TIM2->PSC = 72 - 1; // Prescaler to get a 1 MHz timer clock
        TIM2->ARR = 20000 - 1; // Auto-reload value for 20 ms period (50 Hz)
        TIM2->CCR2 = 1500; // Initial pulse width for center position

        // Configure PWM mode 1 for CH2 (connected to PA1)
        TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
        TIM2->CCMR1 &= ~TIM_CCMR1_OC2M_0;
        TIM2->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload for CH2

        TIM2->CCER |= TIM_CCER_CC2E; // Enable capture/compare channel 2 output
        TIM2->CR1 |= TIM_CR1_CEN; // Enable Timer2
    }

    // Set the angle of the servo motor (angle between 0 and 180 degrees)
    void SetAngle(uint8_t angle) {
        // Map the angle to the corresponding pulse width
        uint16_t pulse_width = 500 + static_cast<uint16_t>(angle) * 20; // 500 to 2500 microseconds for 0 to 180 degrees
        TIM2->CCR2 = pulse_width;
    }
};

void delay_ms(uint32_t ms) {
    // Assuming SysTick is configured to generate interrupts every 1ms
    SysTick_Config(SystemCoreClock / 1000);

    while (ms_delay > 0) {
        // Wait for SysTick interrupt
    }

    SysTick->CTRL = 0; // Disable SysTick
}

void SysTick_Handler(void) {
    if (ms_delay > 0) {
        ms_delay--;
    }
}

int main() {
    ServoMotor servo;

    while (1) {
        // Move the servo to different angles (0 to 180 degrees)
        for (uint8_t angle = 0; angle <= 180; angle += 10) {
            servo.SetAngle(angle);
            delay_ms(100);
            // Add delay or perform other tasks as needed
        }
    }
}
