
#include "main.h"
#include "gpio_hal.h"
#include <array>


void SystemClock_Config(void);
void led_on(void)
{
	Dout led0(LED0_GPIO_Port,LED0_Pin);
	Dout led1(LED1_GPIO_Port,LED1_Pin);
	Dout led2(LED2_GPIO_Port,LED2_Pin);
	Dout led3(LED3_GPIO_Port,LED3_Pin);
}

void led_off(void)
{
	Dout led0(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_RESET);
	Dout led1(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
	Dout led2(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
	Dout led3(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
}

void led_toggle(void)
{
	Dout led0(LED0_GPIO_Port,LED0_Pin);
	Dout led1(LED1_GPIO_Port,LED1_Pin);
	Dout led2(LED2_GPIO_Port,LED2_Pin);
	Dout led3(LED3_GPIO_Port,LED3_Pin);
	led0.toggle();
	led1.toggle();
	led2.toggle();
	led3.toggle();
}



int main(void)
{

  HAL_Init();

  SystemClock_Config();

  // Dout(LED0_GPIO_Port,LED0_Pin, GPIO_PIN_RESET);
  Dout led0(LED0_GPIO_Port,LED0_Pin);
  Dout led1(LED1_GPIO_Port,LED1_Pin);
  Dout led2(LED2_GPIO_Port,LED2_Pin);
  Dout led3(LED3_GPIO_Port,LED3_Pin);

  std::array<Dout,4> led_bus = {led0,led1,led2,led3};

  //led_on();

  while (1)
  {
	  	 /*led0.toggle();
	  	 led1.toggle();
	  	 led2.toggle();
	  	 led3.toggle();
	  	 HAL_Delay(250);*/

	  //led_toggle();
	  //led_off();
	  //HAL_Delay(250);

	  led0.toggle();

	  for(uint32_t i=0; i<led_bus.size();i++)
	  {
		  if(i==0)
		  {
			  led_bus[led_bus.size()-1].write(GPIO_PIN_SET);
		  }
		  else
		  {
			  led_bus[i-1].write(GPIO_PIN_SET);
		  }
		  led_bus[i].write(GPIO_PIN_RESET);
		  HAL_Delay(250);
	  }
  }

}


void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{

  __disable_irq();
  while (1)
  {
  }

}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif
