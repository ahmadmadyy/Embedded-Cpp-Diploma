#include "main.h"

void EXTI9_5_IRQHandler(void)
{
    if (EXTI->PR & (1 << 5)) // Check if EXTI line 5 triggered the interrupt
    {
        EXTI->PR = EXTI_PR_PR5; // Clear the pending interrupt
        GPIOA->ODR ^= (1 << 1); // Toggle the LED (GPIOA Pin 1)
    }
}

void init_EXTI()
{
    // Initialize RCC for relevant peripherals
    //RCC->APB2ENR |= RCC_APB2ENR_AFIOEN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN;
    RCC->APB2ENR = (1<<0) | (1<<3) | (1<<2);

    // Configure GPIO pins for the button (GPIOB Pin 5) and LED (GPIOA Pin 1)
    //GPIOB->CRL &= ~(0xF << 20); // Clear bits 20-23 (GPIOB Pin 5 input mode)
    //GPIOA->CRL |= (0b0010 << 4); // Configure GPIOA Pin 1 as output
    //GPIOA->CRL &= ~(0b11 << 5); // Configure as push-pull output

    // Configure EXTI and NVIC
    AFIO->EXTICR[1] = (1 << 5); // Map EXTI line 5 to GPIOB Pin 5
    EXTI->IMR |= (1 << 5); // Unmask interrupt EXTI 5
    EXTI->EMR |= (1 << 4) ;             // unmask event
    EXTI->RTSR |= (1 << 5); // Set rising edge trigger
    NVIC->ISER[0] = (1<<23);
}

int main()
{
	GPIOA->CRL = 0x33333333;
	GPIOB->CRL = 0x44444444;
	GPIOA->ODR =  (1 << 1);
    init_EXTI();

    while (1)
    {
        // Your application code can run here
    }
}


----------------------------------------------------------------------
#include "stm32f10x.h"

extern "C" {
  void EXTI9_5_IRQHandler(void) {
    if (EXTI->PR & EXTI_PR_PR5) {
      EXTI->PR |= EXTI_PR_PR5; // Clear pending interrupt
      GPIOA->ODR ^= (1 << 1); // Toggle LED on PA1
    }
  }
}

int main(void) {
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN; // Enable clock for GPIOA and GPIOB

  // Configure PA1 as output for LED
  GPIOA->CRL &= ~(0xF << 4);
  GPIOA->CRL |= (0x3 << 4); // Set PA1 as output

  // Configure PB5 as input for push button
  GPIOB->CRL &= ~(0xF << 20);
  GPIOB->CRL |= (0x4 << 20); // Set PB5 as input

  // Configure external interrupt for PB5
  AFIO->EXTICR[1] |= (1 << 5); // Map EXTI5 to PB5
  EXTI->IMR |= EXTI_IMR_MR5; // Unmask interrupt
  EXTI->FTSR |= EXTI_FTSR_TR5; // Enable falling edge trigger for PB5
  NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable EXTI9_5 interrupt in NVIC

  while (1) {
    // Loop forever
  }
}

--------------------------------------------------------------------
#include "main.h"

extern "C"
{
  void EXTI9_5_IRQHandler(void)
  {
    if (EXTI->PR & EXTI_PR_PR5)
    {
      EXTI->PR |= EXTI_PR_PR5; // Clear pending interrupt
      GPIOA->ODR ^= (1 << 1); // Toggle LED on PA1
      for(int i=0;i<=1000;i++);
    }
  }
}

void initLED()
{
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable clock for GPIOA

  // Configure PA1 as output for LED
  GPIOA->CRL &= ~(0xF << 4);
  GPIOA->CRL |= (0x3 << 4); // Set PA1 as output
  GPIOA->ODR |=  (1 << 1);
}

void initEXTINT()
{
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // Enable clock for GPIOB
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // Enable clock for alternate function
	// Configure PB5 as input for push button
	GPIOB->CRL &= ~(0xF << 20);
	GPIOB->CRL |= (0x4 << 20); // Set PB5 as input (Floating input mode)


	// Configure external interrupt for PB5
	AFIO->EXTICR[1] |= (1 << 5); // Map EXTI5 to PB5
	EXTI->IMR |= EXTI_IMR_MR5; // Unmask interrupt
	EXTI->RTSR |= EXTI_FTSR_TR5; // Enable rising edge trigger for PB5
	//NVIC_EnableIRQ(EXTI9_5_IRQn); // Enable EXTI9_5 interrupt in NVIC
	NVIC->ISER[0] = (1 << 23); // Enable EXTI5 interrupt in NVIC

}

int main(void)
{
	initLED();
	initEXTINT();


	while (1)
	{
		// Loop forever
	}
}

