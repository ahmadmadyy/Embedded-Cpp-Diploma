
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003c8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d8b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000531  00000000  00000000  00020dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000145  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001525a  00000000  00000000  00021645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002010  00000000  00000000  0003689f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b155  00000000  00000000  000388af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000057c  00000000  00000000  000b3a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000b3f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003b0 	.word	0x080003b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003b0 	.word	0x080003b0

0800014c <SPI_Init>:
#include "main.h"

void SPI_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  // Enable GPIOA and SPI1 clocks
  RCC->APB2ENR |= (1 << 2) | (1 << 12);
 8000150:	4b1c      	ldr	r3, [pc, #112]	; (80001c4 <SPI_Init+0x78>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a1b      	ldr	r2, [pc, #108]	; (80001c4 <SPI_Init+0x78>)
 8000156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800015a:	f043 0304 	orr.w	r3, r3, #4
 800015e:	6193      	str	r3, [r2, #24]

  // Configure PA5 (SCK), PA6 (MISO), PA7 (MOSI) as Alternate Function Push Pull
  GPIOA->CRL &= ~((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18) | (1 << 17) | (1 << 16));
 8000160:	4b19      	ldr	r3, [pc, #100]	; (80001c8 <SPI_Init+0x7c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a18      	ldr	r2, [pc, #96]	; (80001c8 <SPI_Init+0x7c>)
 8000166:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800016a:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (0b10 << 20) | (0b01 << 16);
 800016c:	4b16      	ldr	r3, [pc, #88]	; (80001c8 <SPI_Init+0x7c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a15      	ldr	r2, [pc, #84]	; (80001c8 <SPI_Init+0x7c>)
 8000172:	f443 1304 	orr.w	r3, r3, #2162688	; 0x210000
 8000176:	6013      	str	r3, [r2, #0]

  // Configure SPI1
  SPI1->CR1 &= ~(1 << 6); // Disable SPI1
 8000178:	4b14      	ldr	r3, [pc, #80]	; (80001cc <SPI_Init+0x80>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a13      	ldr	r2, [pc, #76]	; (80001cc <SPI_Init+0x80>)
 800017e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000182:	6013      	str	r3, [r2, #0]

  SPI1->CR1 = 0;
 8000184:	4b11      	ldr	r3, [pc, #68]	; (80001cc <SPI_Init+0x80>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
  SPI1->CR1 |= (1 << 2) | (0b101 << 3); // Master, fPCLK/32
 800018a:	4b10      	ldr	r3, [pc, #64]	; (80001cc <SPI_Init+0x80>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a0f      	ldr	r2, [pc, #60]	; (80001cc <SPI_Init+0x80>)
 8000190:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000194:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= (1 << 9) | (1 << 8); // master mode
 8000196:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <SPI_Init+0x80>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a0c      	ldr	r2, [pc, #48]	; (80001cc <SPI_Init+0x80>)
 800019c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80001a0:	6013      	str	r3, [r2, #0]
  SPI1->CR2 |= (1 << 2); // Enable SS output
 80001a2:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <SPI_Init+0x80>)
 80001a4:	685b      	ldr	r3, [r3, #4]
 80001a6:	4a09      	ldr	r2, [pc, #36]	; (80001cc <SPI_Init+0x80>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	6053      	str	r3, [r2, #4]
  SPI1->CR1 |= (1 << 6); // Enable SPI1
 80001ae:	4b07      	ldr	r3, [pc, #28]	; (80001cc <SPI_Init+0x80>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a06      	ldr	r2, [pc, #24]	; (80001cc <SPI_Init+0x80>)
 80001b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001b8:	6013      	str	r3, [r2, #0]
}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010800 	.word	0x40010800
 80001cc:	40013000 	.word	0x40013000

080001d0 <SPI_Transmit>:

void SPI_Transmit(uint8_t data)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
  while (!(SPI1->SR & (1 << 1))); // Wait until transmit buffer is empty
 80001da:	bf00      	nop
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <SPI_Transmit+0x28>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	f003 0302 	and.w	r3, r3, #2
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <SPI_Transmit+0xc>
  SPI1->DR = data;
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <SPI_Transmit+0x28>)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	60d3      	str	r3, [r2, #12]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40013000 	.word	0x40013000

080001fc <SPI_Receive>:

uint8_t SPI_Receive(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  while (!(SPI1->SR & (1 << 0))); // Wait until receive buffer is not empty
 8000200:	bf00      	nop
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <SPI_Receive+0x20>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <SPI_Receive+0x6>
  return SPI1->DR;
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <SPI_Receive+0x20>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	b2db      	uxtb	r3, r3
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40013000 	.word	0x40013000

08000220 <SPI_TransmitReceive>:

void SPI_TransmitReceive(uint8_t *txData, uint8_t *rxData, uint16_t size)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	4613      	mov	r3, r2
 800022c:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < size; ++i)
 800022e:	2300      	movs	r3, #0
 8000230:	82fb      	strh	r3, [r7, #22]
 8000232:	e010      	b.n	8000256 <SPI_TransmitReceive+0x36>
  {
    SPI_Transmit(txData[i]);
 8000234:	8afb      	ldrh	r3, [r7, #22]
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	4413      	add	r3, r2
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffc7 	bl	80001d0 <SPI_Transmit>
    rxData[i] = SPI_Receive();
 8000242:	8afb      	ldrh	r3, [r7, #22]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	18d4      	adds	r4, r2, r3
 8000248:	f7ff ffd8 	bl	80001fc <SPI_Receive>
 800024c:	4603      	mov	r3, r0
 800024e:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < size; ++i)
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	3301      	adds	r3, #1
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	8afa      	ldrh	r2, [r7, #22]
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	429a      	cmp	r2, r3
 800025c:	d3ea      	bcc.n	8000234 <SPI_TransmitReceive+0x14>
  }
}
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	371c      	adds	r7, #28
 8000264:	46bd      	mov	sp, r7
 8000266:	bd90      	pop	{r4, r7, pc}

08000268 <main>:

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  SPI_Init(); // Initialize SPI
 800026e:	f7ff ff6d 	bl	800014c <SPI_Init>

  // Example usage
  uint8_t txData[] = {0x01, 0x02, 0x03, 0x04}; // Example data to transmit
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x30>)
 8000274:	60bb      	str	r3, [r7, #8]
  uint8_t rxData[4]; // Buffer for received data

  while (1)
  {
    // Example
    SPI_TransmitReceive(txData, rxData, sizeof(txData));
 8000276:	1d39      	adds	r1, r7, #4
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	2204      	movs	r2, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ffce 	bl	8000220 <SPI_TransmitReceive>



    for (int i = 0; i < sizeof(rxData); ++i)
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e002      	b.n	8000290 <main+0x28>
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3301      	adds	r3, #1
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d9f9      	bls.n	800028a <main+0x22>
    SPI_TransmitReceive(txData, rxData, sizeof(txData));
 8000296:	e7ee      	b.n	8000276 <main+0xe>
 8000298:	04030201 	.word	0x04030201

0800029c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <NMI_Handler+0x4>

080002a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <HardFault_Handler+0x4>

080002a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <MemManage_Handler+0x4>

080002ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <BusFault_Handler+0x4>

080002b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <UsageFault_Handler+0x4>

080002ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e2:	f000 f82f 	bl	8000344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}

080002ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
	...

080002f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002f8:	f7ff fff7 	bl	80002ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480b      	ldr	r0, [pc, #44]	; (800032c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002fe:	490c      	ldr	r1, [pc, #48]	; (8000330 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a09      	ldr	r2, [pc, #36]	; (8000338 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000314:	4c09      	ldr	r4, [pc, #36]	; (800033c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f821 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff9f 	bl	8000268 <main>
  bx lr
 800032a:	4770      	bx	lr
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000334:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 8000338:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800033c:	20000024 	.word	0x20000024

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <HAL_IncTick+0x1c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_IncTick+0x20>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <HAL_IncTick+0x20>)
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	20000000 	.word	0x20000000
 8000364:	20000020 	.word	0x20000020

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	2600      	movs	r6, #0
 800036c:	4d0c      	ldr	r5, [pc, #48]	; (80003a0 <__libc_init_array+0x38>)
 800036e:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	f000 f81a 	bl	80003b0 <_init>
 800037c:	2600      	movs	r6, #0
 800037e:	4d0a      	ldr	r5, [pc, #40]	; (80003a8 <__libc_init_array+0x40>)
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <__libc_init_array+0x44>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
