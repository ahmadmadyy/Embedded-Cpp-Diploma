
Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  08000394  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  08000394  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800039c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d61  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000563  00000000  00000000  00020dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00021338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000139  00000000  00000000  000214f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001535a  00000000  00000000  00021631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fac  00000000  00000000  0003698b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b7ca  00000000  00000000  00038937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000053c  00000000  00000000  000b4104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b4640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800037c 	.word	0x0800037c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800037c 	.word	0x0800037c

0800014c <_ZN10ServoMotorC1Ev>:
#include "main.h"

class ServoMotor {
public:
    ServoMotor() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // Enable GPIOA clock
 8000154:	4b26      	ldr	r3, [pc, #152]	; (80001f0 <_ZN10ServoMotorC1Ev+0xa4>)
 8000156:	699b      	ldr	r3, [r3, #24]
 8000158:	4a25      	ldr	r2, [pc, #148]	; (80001f0 <_ZN10ServoMotorC1Ev+0xa4>)
 800015a:	f043 0304 	orr.w	r3, r3, #4
 800015e:	6193      	str	r3, [r2, #24]
        GPIOA->CRL |= (GPIO_CRL_MODE1_1 | GPIO_CRL_CNF1_1); // Configure PA1 as an output with 2 MHz speed and alternate function push-pull
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <_ZN10ServoMotorC1Ev+0xa8>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a23      	ldr	r2, [pc, #140]	; (80001f4 <_ZN10ServoMotorC1Ev+0xa8>)
 8000166:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800016a:	6013      	str	r3, [r2, #0]

        // Configure Timer2 for PWM generation
        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enable Timer2 clock
 800016c:	4b20      	ldr	r3, [pc, #128]	; (80001f0 <_ZN10ServoMotorC1Ev+0xa4>)
 800016e:	69db      	ldr	r3, [r3, #28]
 8000170:	4a1f      	ldr	r2, [pc, #124]	; (80001f0 <_ZN10ServoMotorC1Ev+0xa4>)
 8000172:	f043 0301 	orr.w	r3, r3, #1
 8000176:	61d3      	str	r3, [r2, #28]
        TIM2->PSC = 72 - 1; // Prescaler to get a 1 MHz timer clock
 8000178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800017c:	2247      	movs	r2, #71	; 0x47
 800017e:	629a      	str	r2, [r3, #40]	; 0x28
        TIM2->ARR = 20000 - 1; // Auto-reload value for 20 ms period (50 Hz)
 8000180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000184:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000188:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM2->CCR2 = 1500; // Initial pulse width for center position
 800018a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800018e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000192:	639a      	str	r2, [r3, #56]	; 0x38

        // Configure PWM mode 1 for CH2 (connected to PA1)
        TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
 8000194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800019e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80001a2:	6193      	str	r3, [r2, #24]
        TIM2->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 80001a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80001b2:	6193      	str	r3, [r2, #24]
        TIM2->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload for CH2
 80001b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b8:	699b      	ldr	r3, [r3, #24]
 80001ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001c2:	6193      	str	r3, [r2, #24]

        TIM2->CCER |= TIM_CCER_CC2E; // Enable capture/compare channel 2 output
 80001c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c8:	6a1b      	ldr	r3, [r3, #32]
 80001ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6213      	str	r3, [r2, #32]
        TIM2->CR1 |= TIM_CR1_CEN; // Enable Timer2
 80001d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
    }
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4618      	mov	r0, r3
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40010800 	.word	0x40010800

080001f8 <_ZN10ServoMotor8SetAngleEh>:

    // Set the angle of the servo motor (angle between 0 and 180 degrees)
    void SetAngle(uint8_t angle) {
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	70fb      	strb	r3, [r7, #3]
        // Map the angle to the corresponding pulse width
        uint16_t pulse_width = 500 + static_cast<uint16_t>(angle) * 20; // 500 to 2500 microseconds for 0 to 180 degrees
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	b29b      	uxth	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	0092      	lsls	r2, r2, #2
 800020c:	4413      	add	r3, r2
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	b29b      	uxth	r3, r3
 8000212:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000216:	81fb      	strh	r3, [r7, #14]
        TIM2->CCR2 = pulse_width;
 8000218:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021c:	89fb      	ldrh	r3, [r7, #14]
 800021e:	6393      	str	r3, [r2, #56]	; 0x38
    }
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <main>:
};

int main() {
 800022a:	b580      	push	{r7, lr}
 800022c:	b084      	sub	sp, #16
 800022e:	af00      	add	r7, sp, #0
    ServoMotor servo;
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ff8a 	bl	800014c <_ZN10ServoMotorC1Ev>

    while (1) {
        // Move the servo to different angles (0 to 180 degrees)
        for (uint8_t angle = 0; angle <= 180; angle += 10) {
 8000238:	2300      	movs	r3, #0
 800023a:	73fb      	strb	r3, [r7, #15]
 800023c:	e011      	b.n	8000262 <main+0x38>
            servo.SetAngle(angle);
 800023e:	7bfa      	ldrb	r2, [r7, #15]
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4611      	mov	r1, r2
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffd7 	bl	80001f8 <_ZN10ServoMotor8SetAngleEh>
            // Add delay or perform other tasks as needed
            for(int i=0;i<100;i++);
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	e002      	b.n	8000256 <main+0x2c>
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	3301      	adds	r3, #1
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b63      	cmp	r3, #99	; 0x63
 800025a:	ddf9      	ble.n	8000250 <main+0x26>
        for (uint8_t angle = 0; angle <= 180; angle += 10) {
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	330a      	adds	r3, #10
 8000260:	73fb      	strb	r3, [r7, #15]
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	2bb4      	cmp	r3, #180	; 0xb4
 8000266:	d9ea      	bls.n	800023e <main+0x14>
        }
    }
 8000268:	e7e6      	b.n	8000238 <main+0xe>

0800026a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800026e:	e7fe      	b.n	800026e <NMI_Handler+0x4>

08000270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <HardFault_Handler+0x4>

08000276 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <MemManage_Handler+0x4>

0800027c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <BusFault_Handler+0x4>

08000282 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <UsageFault_Handler+0x4>

08000288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b0:	f000 f82e 	bl	8000310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002c4:	f7ff fff8 	bl	80002b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002ca:	490c      	ldr	r1, [pc, #48]	; (80002fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002cc:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a09      	ldr	r2, [pc, #36]	; (8000304 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002e0:	4c09      	ldr	r4, [pc, #36]	; (8000308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ee:	f000 f821 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ff9a 	bl	800022a <main>
  bx lr
 80002f6:	4770      	bx	lr
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000300:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000304:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000308:	20000024 	.word	0x20000024

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <HAL_IncTick+0x1c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <HAL_IncTick+0x20>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4413      	add	r3, r2
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <HAL_IncTick+0x20>)
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000000 	.word	0x20000000
 8000330:	20000020 	.word	0x20000020

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2600      	movs	r6, #0
 8000338:	4d0c      	ldr	r5, [pc, #48]	; (800036c <__libc_init_array+0x38>)
 800033a:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	f000 f81a 	bl	800037c <_init>
 8000348:	2600      	movs	r6, #0
 800034a:	4d0a      	ldr	r5, [pc, #40]	; (8000374 <__libc_init_array+0x40>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <__libc_init_array+0x44>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f855 3b04 	ldr.w	r3, [r5], #4
 800035c:	4798      	blx	r3
 800035e:	3601      	adds	r6, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f855 3b04 	ldr.w	r3, [r5], #4
 8000366:	4798      	blx	r3
 8000368:	3601      	adds	r6, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
