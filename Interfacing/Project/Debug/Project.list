
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003f4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003fc  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000400  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000400  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001067  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000547  00000000  00000000  000210d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000140  00000000  00000000  000217e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015bbb  00000000  00000000  00021928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020b5  00000000  00000000  000374e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081f2c  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000054c  00000000  00000000  000bb4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003dc 	.word	0x080003dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003dc 	.word	0x080003dc

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	; (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <TIM1_UP_IRQHandler>:
#define TIM_PULSE_MAX 2000     // Maximum pulse width in microseconds

volatile uint16_t pulse_width = TIM_PULSE_MIN;
volatile uint8_t direction = 1;  // 1 for increasing pulse width, 0 for decreasing

void TIM1_UP_IRQHandler(void) {
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
    if (TIM1->SR & TIM_SR_UIF) {
 8000188:	4b1e      	ldr	r3, [pc, #120]	; (8000204 <TIM1_UP_IRQHandler+0x80>)
 800018a:	691b      	ldr	r3, [r3, #16]
 800018c:	f003 0301 	and.w	r3, r3, #1
 8000190:	2b00      	cmp	r3, #0
 8000192:	d032      	beq.n	80001fa <TIM1_UP_IRQHandler+0x76>
        // Clear the update interrupt flag
        TIM1->SR &= ~TIM_SR_UIF;
 8000194:	4b1b      	ldr	r3, [pc, #108]	; (8000204 <TIM1_UP_IRQHandler+0x80>)
 8000196:	691b      	ldr	r3, [r3, #16]
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <TIM1_UP_IRQHandler+0x80>)
 800019a:	f023 0301 	bic.w	r3, r3, #1
 800019e:	6113      	str	r3, [r2, #16]

        // Update the CCR1 register with the new pulse width
        TIM1->CCR1 = pulse_width;
 80001a0:	4b19      	ldr	r3, [pc, #100]	; (8000208 <TIM1_UP_IRQHandler+0x84>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	4b17      	ldr	r3, [pc, #92]	; (8000204 <TIM1_UP_IRQHandler+0x80>)
 80001a8:	635a      	str	r2, [r3, #52]	; 0x34

        // Adjust the pulse width for the next iteration
        pulse_width += (direction) ? 10 : -10;
 80001aa:	4b18      	ldr	r3, [pc, #96]	; (800020c <TIM1_UP_IRQHandler+0x88>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	b2db      	uxtb	r3, r3
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <TIM1_UP_IRQHandler+0x34>
 80001b4:	230a      	movs	r3, #10
 80001b6:	e001      	b.n	80001bc <TIM1_UP_IRQHandler+0x38>
 80001b8:	f06f 0309 	mvn.w	r3, #9
 80001bc:	b29a      	uxth	r2, r3
 80001be:	4b12      	ldr	r3, [pc, #72]	; (8000208 <TIM1_UP_IRQHandler+0x84>)
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	b29b      	uxth	r3, r3
 80001c4:	4413      	add	r3, r2
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <TIM1_UP_IRQHandler+0x84>)
 80001ca:	801a      	strh	r2, [r3, #0]

        // Change direction when reaching the limits
        if (pulse_width >= TIM_PULSE_MAX || pulse_width <= TIM_PULSE_MIN) {
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <TIM1_UP_IRQHandler+0x84>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80001d6:	d205      	bcs.n	80001e4 <TIM1_UP_IRQHandler+0x60>
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <TIM1_UP_IRQHandler+0x84>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e2:	d80a      	bhi.n	80001fa <TIM1_UP_IRQHandler+0x76>
            direction = !direction;
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <TIM1_UP_IRQHandler+0x88>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	bf0c      	ite	eq
 80001ee:	2301      	moveq	r3, #1
 80001f0:	2300      	movne	r3, #0
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <TIM1_UP_IRQHandler+0x88>)
 80001f8:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40012c00 	.word	0x40012c00
 8000208:	20000000 	.word	0x20000000
 800020c:	20000002 	.word	0x20000002

08000210 <TIM1_Config>:

void TIM1_Config(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <TIM1_Config+0x78>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <TIM1_Config+0x78>)
 800021a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800021e:	6193      	str	r3, [r2, #24]

    // Configure TIM1 for PWM mode
    TIM1->CR1 = 0;                  // Reset control register
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <TIM1_Config+0x7c>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
    TIM1->CR1 |= TIM_CR1_ARPE;      // Auto-reload preload enable
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <TIM1_Config+0x7c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <TIM1_Config+0x7c>)
 800022c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000230:	6013      	str	r3, [r2, #0]
    TIM1->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // PWM mode 1
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <TIM1_Config+0x7c>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	4a15      	ldr	r2, [pc, #84]	; (800028c <TIM1_Config+0x7c>)
 8000238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800023c:	6193      	str	r3, [r2, #24]
    TIM1->CCER |= TIM_CCER_CC1E;    // Enable capture/compare channel 1 output
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <TIM1_Config+0x7c>)
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	4a12      	ldr	r2, [pc, #72]	; (800028c <TIM1_Config+0x7c>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	6213      	str	r3, [r2, #32]
    TIM1->BDTR |= TIM_BDTR_MOE;     // Main output enable
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <TIM1_Config+0x7c>)
 800024c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800024e:	4a0f      	ldr	r2, [pc, #60]	; (800028c <TIM1_Config+0x7c>)
 8000250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000254:	6453      	str	r3, [r2, #68]	; 0x44

    // Set the period and initial pulse width
    TIM1->ARR = TIM_PERIOD - 1;
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <TIM1_Config+0x7c>)
 8000258:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800025c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CCR1 = TIM_PULSE_MIN;
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <TIM1_Config+0x7c>)
 8000260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000264:	635a      	str	r2, [r3, #52]	; 0x34

    // Enable TIM1 update interrupt
    TIM1->DIER |= TIM_DIER_UIE;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <TIM1_Config+0x7c>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	4a08      	ldr	r2, [pc, #32]	; (800028c <TIM1_Config+0x7c>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	60d3      	str	r3, [r2, #12]

    // Enable TIM1 interrupt in NVIC
    NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000272:	2019      	movs	r0, #25
 8000274:	f7ff ff6a 	bl	800014c <__NVIC_EnableIRQ>

    // Start the timer
    TIM1->CR1 |= TIM_CR1_CEN;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <TIM1_Config+0x7c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <TIM1_Config+0x7c>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40021000 	.word	0x40021000
 800028c:	40012c00 	.word	0x40012c00

08000290 <main>:

int main(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <main+0x30>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <main+0x30>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]

    // Configure PA8 as output push-pull
    SERVO_PORT->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <main+0x34>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <main+0x34>)
 80002a6:	f023 030f 	bic.w	r3, r3, #15
 80002aa:	6053      	str	r3, [r2, #4]
    SERVO_PORT->CRH |= GPIO_CRH_MODE8_1;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <main+0x34>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <main+0x34>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6053      	str	r3, [r2, #4]

    // Initialize TIM1 for PWM
    TIM1_Config();
 80002b8:	f7ff ffaa 	bl	8000210 <TIM1_Config>

    while (1) {
 80002bc:	e7fe      	b.n	80002bc <main+0x2c>
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler+0x4>

080002ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <HardFault_Handler+0x4>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>

080002da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr

080002fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr

0800030a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800030e:	f000 f82f 	bl	8000370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}

08000316 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
	...

08000324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000324:	f7ff fff7 	bl	8000316 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480b      	ldr	r0, [pc, #44]	; (8000358 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800032a:	490c      	ldr	r1, [pc, #48]	; (800035c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800032c:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <LoopFillZerobss+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a09      	ldr	r2, [pc, #36]	; (8000364 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000340:	4c09      	ldr	r4, [pc, #36]	; (8000368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800034e:	f000 f821 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff9d 	bl	8000290 <main>
  bx lr
 8000356:	4770      	bx	lr
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000360:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000364:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000368:	20000024 	.word	0x20000024

0800036c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC1_2_IRQHandler>
	...

08000370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <HAL_IncTick+0x1c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	461a      	mov	r2, r3
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <HAL_IncTick+0x20>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4413      	add	r3, r2
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <HAL_IncTick+0x20>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	20000003 	.word	0x20000003
 8000390:	20000020 	.word	0x20000020

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	2600      	movs	r6, #0
 8000398:	4d0c      	ldr	r5, [pc, #48]	; (80003cc <__libc_init_array+0x38>)
 800039a:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	f000 f81a 	bl	80003dc <_init>
 80003a8:	2600      	movs	r6, #0
 80003aa:	4d0a      	ldr	r5, [pc, #40]	; (80003d4 <__libc_init_array+0x40>)
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <__libc_init_array+0x44>)
 80003ae:	1b64      	subs	r4, r4, r5
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
